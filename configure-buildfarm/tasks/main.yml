---

-
  name: "Include release specific image versions"
  include_vars: ../shared_files/{{ rhmap_version }}.yml
  when: rhmap_version is defined
  tags:
    - config

-
  name: "Setup the directory for productization"
  set_fact:
    groovy_script_dir: ../roles/digger-installer/configure-buildfarm/files
  when: rhmap_version is defined
  tags:
    - plugins
    - proxy
    - config
    - security

- name: "Setup directory for for community resources"
  set_fact:
    groovy_script_dir: configure-buildfarm/files
  when: rhmap_version is not defined
  tags:
    - plugins
    - proxy
    - config
    - security

-
  name: "Get jenkins url"
  shell: "oc get route jenkins --namespace={{ project_name }} -o jsonpath='{.spec.host}'"
  register: route_output
  changed_when: False
  tags:
    - plugins
    - proxy
    - config
    - security

- name: "Get node public key"
  shell: cat ~/.ssh/id_rsa.pub
  register: public_key

- pause:
    prompt: |
         Note: The following step is required. Playbook run will fail if skipped.

         Jenkins was successfully installed. In order to configure Jenkins and continue with the installation please add the below public key to the input box 'SSH Public Keys' at the link below:
         {{ jenkins_route_protocol | default('https') }}://{{ route_output.stdout }}/user/{{ jenkins_username | default("admin") }}/configure

         {{ public_key.stdout }}

         After you've added your Public SSH key, hit enter to continue or ctrl + c to cancel.
  tags:
    - plugins
    - proxy
    - config
    - security


- name: "Get the jenkins client cli jar"
  get_url:
    url: "{{ jenkins_route_protocol | default('https') }}://{{ route_output.stdout }}/jnlpJars/jenkins-cli.jar"
    dest: /tmp/jenkins-cli.jar
    force: yes
    mode: 0775
  tags:
    - plugins
    - proxy
    - config
    - security

-
  name: "Create Groovy script from template"
  template:
    src: proxy-config.j2
    dest: "/tmp/proxy-config.groovy"
    force: yes
  register: proxy_task
  when:
    - proxy_host is defined
    - proxy_host != ''
    - proxy_port is defined
    - proxy_port != ''
  tags:
     - proxy

-
  name: "Configure HTTP Proxy Settings"
  command: java -jar /tmp/jenkins-cli.jar -remoting -s {{ jenkins_route_protocol | default('https') }}://{{ route_output.stdout }}  groovy /tmp/proxy-config.groovy
  when: not proxy_task|skipped
  tags:
     - proxy

- name: "Read android slave definition"
  set_fact:
    android_slave_image_def: "{{ deployments | selectattr('name', 'match', '^android-slave$') | map(attribute='containers') | list }}"
  tags:
    - config

-
  name: "Get image version"
  set_fact:
    android_slave_image: "{{ android_slave_image_def[0][0].image }}"
  tags:
     - config

-
  name: "Create Kubernetes plugin config update Groovy script from template"
  template:
    src: kubernetes-plugin-config.j2
    dest: "/tmp/kubernetes-plugin-config.groovy"
    force: yes
  tags:
    - config

- name: "Configure Kubernetes plugin"
  shell: "java -jar /tmp/jenkins-cli.jar -remoting -s {{ jenkins_route_protocol | default('https') }}://{{ route_output.stdout }}  groovy  /tmp/kubernetes-plugin-config.groovy"
  register: output
  failed_when: output.stderr != ''
  tags:
     - config

- name: "Copy configure plugins script"
  copy:
     src: "{{ groovy_script_dir }}/configure-plugins.groovy"
     dest: "/tmp/configure-plugins.groovy"
     mode: 0755
  tags:
    - config

-
  name: "Get list of missing and unmet Jenkins plugins"
  command: java -jar /tmp/jenkins-cli.jar -remoting -s {{ jenkins_route_protocol | default('https') }}://{{ route_output.stdout }}  groovy /tmp/configure-plugins.groovy  '{{ jenkins_plugins | to_json | replace('\n', '') }}'
  register: plugins_output
  changed_when: false
  tags:
    - plugins

-
  name: "Fetch required plugin"
  get_url:
    url: "{{ item.archive }}"
    dest: /tmp/{{item.name}}.hpi
    mode: 0775
  environment:
    http_proxy: "{{ proxy_url | default('') }}"
    https_proxy: "{{ proxy_url | default('') }}"
  with_items: "{{ jenkins_plugins }}"
  when: plugins_output.stdout.find( item.name) != -1
  register: fetched_plugins
  notify:
    - remove plugins
  tags:
    - plugins

-
  name: "Install plugins and restart Jenkins server"
  command: "java -jar /tmp/jenkins-cli.jar -remoting -s {{ jenkins_route_protocol | default('https') }}://{{ route_output.stdout }} install-plugin /tmp/{{ item.name }}.hpi {{ (item == jenkins_plugins[-1]) | ternary('-restart','') }}"
  with_items: "{{ jenkins_plugins }}"
  when: plugins_output.stdout.find( item.name) != -1
  register: installed_plugins
  tags:
    - plugins


- name: "Copy configure slave script"
  copy:
     src: "{{ groovy_script_dir }}/configure-plugins.groovy"
     dest: "/tmp/configure-plugins.groovy"
     mode: 0755
  tags:
    - config

-
  name: "Enable Agent â†’ Master Access Control"
  command: java -jar /tmp/jenkins-cli.jar -remoting -s {{ jenkins_route_protocol | default('https') }}://{{ route_output.stdout }}  groovy /tmp/configure-slave-subsystem.groovy
  register: master_slave_output
  changed_when: '"Done" in master_slave_output.stdout'
  tags:
    - security
