---

-
  name: "Include release specific image versions"
  include_vars: ../shared_files/{{ rhmap_version }}.yml
  when: rhmap_version is defined
  tags:
    - config

-
  name: "Setup the directory for productization"
  set_fact:
    groovy_script_dir: ../roles/digger-installer/configure-buildfarm/files
  when: rhmap_version is defined
  tags:
    - plugins
    - proxy
    - config

- name: "Setup directory for for community resources"
  set_fact:
    groovy_script_dir: configure-buildfarm/files
  when: rhmap_version is not defined
  tags:
    - plugins
    - proxy
    - config

-
  name: "Get jenkins url"
  shell: "oc get route jenkins --namespace={{ project_name }} -o jsonpath='{.spec.host}'"
  register: route_output
  changed_when: False
  tags:
    - plugins
    - proxy
    - config

- pause:
    prompt: |
         The BuildFarm was successfully installed, Do you want to configure your existing RHMAP installation to use the new BuildFarm ?

         If you want to continue please add your current ~/.ssh/id_rsa.pub key here

         {{ jenkins_route_protocol | default('https') }}://{{ route_output.stdout }}/user/{{ jenkins_username | default("admin") }}/configure

         Hit enter to continue or ctrl + c to cancel
  tags:
    - plugins
    - proxy
    - config


- name: "Get the jenkins client cli jar"
  connection: local
  get_url:
    url: "{{ jenkins_route_protocol | default('https') }}://{{ route_output.stdout }}/jnlpJars/jenkins-cli.jar"
    dest: /tmp/jenkins-cli.jar
    force: yes
    mode: 0775
  tags:
    - plugins
    - proxy
    - config

-
  name: "Create Groovy script from template"
  template:
    src: proxy-config.j2
    dest: "/tmp/proxy-config.groovy"
    force: yes
  connection: local
  register: proxy_task
  when:
    - proxy_host is defined
    - proxy_host != ''
    - proxy_port is defined
    - proxy_port != ''
  tags:
     - proxy

-
  name: "Configure HTTP Proxy Settings"
  command: java -jar /tmp/jenkins-cli.jar -remoting -s {{ jenkins_route_protocol | default('https') }}://{{ route_output.stdout }}  groovy /tmp/proxy-config.groovy
  when: not proxy_task|skipped
  connection: local
  tags:
     - proxy

- name: "Read android slave definition"
  set_fact:
    android_slave_image_def: "{{ deployments | selectattr('name', 'match', '^android-slave$') | map(attribute='containers') | list }}"
  tags:
    - config

-
  name: "Get image version"
  set_fact:
    android_slave_image: "{{ android_slave_image_def[0][0].image }}"
  tags:
     - config

-
  name: "Create proxy_gradle_opts from variables - no proxy"
  set_fact:
    proxy_gradle_opts: ""
  when: proxy_host is undefined or proxy_host == ""
  tags:
    - proxy
    - config

-
  name: "Create proxy_gradle_opts from variables - proxy - no auth"
  set_fact:
    proxy_gradle_opts: "-Dhttp.proxyHost={{ proxy_host }} -Dhttp.proxyPort={{ proxy_port }} -Dhttps.proxyHost={{ proxy_host }} -Dhttps.proxyPort={{ proxy_port }}"
  when:
    - proxy_host is defined and proxy_host != ""
    - proxy_port is defined and proxy_port != ""
    - proxy_user is undefined or proxy_user == ""
    - proxy_pass is undefined or proxy_password == ""
  tags:
    - proxy
    - config

-
  name: "Create proxy_gradle_opts from variables - proxy - auth"
  set_fact:
    proxy_gradle_opts: "-Dhttp.proxyHost={{ proxy_host }} -Dhttp.proxyPort={{ proxy_port }} -Dhttps.proxyHost={{ proxy_host }} -Dhttps.proxyPort={{ proxy_port }} -Dhttp.proxyUser={{ proxy_user }} -Dhttp.proxyPassword={{ proxy_pass }} -Dhttps.proxyUser={{ proxy_user }} -Dhttps.proxyPassword={{ proxy_pass }}"
  when:
    - proxy_host is defined and proxy_host != ""
    - proxy_port is defined and proxy_port != ""
    - proxy_user is defined and proxy_user != ""
    - proxy_pass is defined and proxy_user != ""
  tags:
    - proxy
    - config

-
  name: "Create podtemplate update Groovy script from template"
  template:
    src: podtemplate-config.j2
    dest: "/tmp/podtemplate-config.groovy"
    force: yes
  connection: local
  tags:
    - config

- name: "Configure pod template"
  shell: "java -jar /tmp/jenkins-cli.jar -remoting -s {{ jenkins_route_protocol | default('https') }}://{{ route_output.stdout }}  groovy  /tmp/podtemplate-config.groovy"
  connection: local
  register: output
  failed_when: output.stderr != ''
  tags:
     - config

-
  name: "Get list of missing and unmet Jenkins plugins"
  command: java -jar /tmp/jenkins-cli.jar -remoting -s {{ jenkins_route_protocol | default('https') }}://{{ route_output.stdout }}  groovy {{ groovy_script_dir }}/configure-plugins.groovy  '{{ jenkins_plugins | to_json | replace('\n', '') }}'
  register: plugins_output
  connection: local
  changed_when: false
  tags:
    - plugins

-
  name: "Fetch required plugin"
  get_url:
    url: "{{ item.archive }}"
    dest: /tmp/{{item.name}}.hpi
    mode: 775
  environment:
    http_proxy: "{{ proxy_url | default('') }}"
    https_proxy: "{{ proxy_url | default('') }}"
  with_items: "{{ jenkins_plugins }}"
  when: plugins_output.stdout.find( item.name) != -1
  register: fetched_plugins
  notify:
    - remove plugins
  tags:
    - plugins

-
  name: "Install plugins"
  shell: "oc cp --namespace={{ project_name }} /tmp/{{ item.name }}.hpi $(oc get pods --namespace={{ project_name }} | grep Running | grep jenkins- | awk '{print $1}' ):/{{ jenkins_home }}/plugins/"
  with_items: "{{ jenkins_plugins }}"
  when: plugins_output.stdout.find( item.name) != -1
  register: installed_plugins
  notify: restart jenkins
  tags:
    - plugins
