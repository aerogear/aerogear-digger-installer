---
## setup default template directories
-
  name: "Check and include productised release image versions"
  include_vars: ../shared_files/{{ rhmap_version }}.yml
  when: rhmap_version is defined

- name: "Include var file for community resources"
  include_vars: vars/buildfarm.yml
  when: rhmap_version is not defined

-
  name: "Read android sdk definition"
  set_fact:
    android_sdk_image_def: "{{ deployments | selectattr('name', 'match', '^android-sdk$') | map(attribute='containers') | list }}"

-
  name: "Get image version"
  set_fact:
    android_sdk_image: "{{ android_sdk_image_def[0][0].image }}"

-
  name: "Update local android-sdk-persistent template with image version and tag"
  template:
    src: android-sdk-persistent-template.j2
    dest: "{{ buildfarm_templates_dir }}/android-sdk-persistent-template.json"

- name: "Create project"
  command: "oc new-project {{ project_name }} --namespace={{ project_name }}"
  register: create_project_result
  failed_when: create_project_result.stderr and create_project_result.stderr != '' and 'already exists' not in create_project_result.stderr
  changed_when: create_project_result.rc == 0 or (create_project_result == 1 and 'created' in create_project_result.stdout)

-
  name: "Deploy the Android SDK image"
  command: "oc new-app --namespace={{ project_name }} -f {{ buildfarm_templates_dir }}/android-sdk-persistent-template.json"
  register: android_create_result
  failed_when:
    - android_create_result.stderr and android_create_result.stderr != '' and 'already exists' not in android_create_result.stderr
  changed_when: android_create_result.rc == 0 or (android_create_result.rc == 1 and 'created' in android_create_result.stdout)


-
  name: "Poll for Pods to become ready"
  command: oc get pods --namespace={{ project_name }} --output jsonpath='{.items[*].status.conditions[?(@.type=="Ready")].status}'
  register: poll_result
  until: "'False' not in poll_result.stdout"
  retries: 60
  delay: 10

-
  name: "Get the Android SDK pod name"
  shell: "oc get pods --namespace={{ project_name }} | grep android-sdk | grep -v deploy | awk '{print$1}'"
  failed_when: output.stdout == ""
  register: output

-
  name: "Register android-sdk pod name"
  set_fact:
    android_sdk_podname: "{{ output.stdout }}"

-
  name: "Set random filename"
  set_fact:
    config_file: "sample{{ 10000 | random }}.cfg"

-
  debug:
    msg: "Filename set to {{ config_file }}"

-
  name: "Template out configuaration file"
  template:
    src: sample_cfg.j2
    dest: /tmp/{{ config_file }}
    force: yes

# install the config file
-
  name: "Copy the Android SDK config file to the container"
  command: "oc cp --namespace={{ project_name }} /tmp/{{ config_file }} {{ android_sdk_podname }}:/opt/tools/{{ config_file }}"
  register: cp_cmd
  failed_when: cp_cmd.stdout != ""

-
  name: "Install the Android SDK"
  command: "oc rsh --namespace={{ project_name }} {{ android_sdk_podname }} androidctl sdk install"

# sync using the config file

-
  name: "Sync Android Platform Versions via config"
  command: "oc rsh --namespace={{ project_name }} {{ android_sdk_podname }} androidctl sync /opt/tools/{{ config_file }}"
  register: rsh_cmd
  become: true
  failed_when: "'Traceback' in rsh_cmd.stdout or 'Common Arguments' in rsh_cmd.stdout"

- debug:
    msg: "Licences are up to date. Continuing...."
  when: "'Accept?' not in rsh_cmd.stdout"

- pause:
    prompt:  "{{ rsh_cmd.stdout.split('--------------------')[1] }} Hit enter to accept the Licence or hit Ctrl _c and 'A' to reject and cancel the installation."
  when: "'Accept?' in rsh_cmd.stdout"

- name: "Accepting the licence  ** Note ** This task may take some time, please be patient"
  command: "oc rsh --namespace={{ project_name }} {{ android_sdk_podname }} androidctl -y sync /opt/tools/{{ config_file }}"
  when: "'Accept?' in rsh_cmd.stdout"