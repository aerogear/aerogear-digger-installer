---

-
  name: Get xcversion binary path
  shell: source ~/.bash_profile && which xcversion
  register: xcversion_bin
  changed_when: False
  failed_when: xcversion_bin.rc != 0

-
  name: Install command line tools
  shell: "{{ xcversion_bin.stdout }} install-cli-tools"
  args:
    executable: /bin/bash
  become: yes
  register: xcode_cli_tools_install
  when: xcode_install_user is defined and xcode_install_password is defined
  failed_when: xcode_cli_tools_install.rc != 0 and xcode_cli_tools_install.stdout.find('already installed') == -1
  changed_when: xcode_cli_tools_install.stdout.find('already installed') == -1

-
  name: Get list of available xcode versions
  command: "{{ xcversion_bin.stdout }} list --all"
  register: xcode_available_status
  changed_when: False
  become: yes
  environment:
    XCODE_INSTALL_USER: "{{ xcode_install_user }}"
    XCODE_INSTALL_PASSWORD: "{{ xcode_install_password }}"

-
  name: Update cached xcode versions for {{ ansible_user }}
  command: "{{ xcversion_bin.stdout }} update"
  become: yes
  environment:
    XCODE_INSTALL_USER: "{{ xcode_install_user }}"
    XCODE_INSTALL_PASSWORD: "{{ xcode_install_password }}"
  when: "item not in xcode_available_status.stdout"
  register: do_update
  until: do_update.rc == 0
  with_items:
    -  "{{ xcode_versions }}"

- debug:
    msg: "Installing Xcode ({{ xcode_versions | join(', ') }}). This may take over 30 minutes for each version. Please be patient."

-
  name: Install xcode versions
  command: "{{ xcversion_bin.stdout }} install {{ item }}"
  with_items: "{{ xcode_versions }}"
  when: xcode_install_user is defined and xcode_install_password is defined
  register: xcode_install
  become: yes
  async: 1000
  poll: 0
  environment:
    XCODE_INSTALL_USER: "{{ xcode_install_user }}"
    XCODE_INSTALL_PASSWORD: "{{ xcode_install_password }}"

-
  name: Poll long running xcode install task
  command: "{{ xcversion_bin.stdout }} installed"
  register: download_status
  until: "item in download_status.stdout"
  retries: 1000
  delay: 60
  failed_when: False
  with_items:
    -  "{{ xcode_versions }}"
  environment:
    XCODE_INSTALL_USER: "{{ xcode_install_user }}"
    XCODE_INSTALL_PASSWORD: "{{ xcode_install_password }}"

-
  name: Check xcode symlink
  stat:
    path: /Applications/Xcode.app
  register: xcode_symlink

-
  name: Set default xcode symlink path
  set_fact:
    xcode_symlink_path: "/Applications/Xcode-{{ xcode_default_version }}.app"
  become: True

-
  name: Set default xcode symlink
  file:
    state: link
    src: "/Applications/Xcode-{{ xcode_default_version }}.app"
    dest: /Applications/Xcode.app
  when: xcode_symlink.stat.exists == False or xcode_symlink.stat.lnk_source != xcode_symlink_path
  become: True
